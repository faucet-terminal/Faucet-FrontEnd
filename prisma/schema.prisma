// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime?   @updatedAt
  role          UserRole    @default(USER)
  accounts      Account[]
  UserClaim     UserClaim[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model CryptoCurrency {
  id              String      @id @default(cuid())
  name            String
  description     String?
  logoUrl         String
  network         String
  balance         Float?
  currencyCode    String
  claimAmount     String
  // 领取频率（小时）
  claimFrequency  Int
  balanceAlert    Float
  donationAddress String?
  userClaim       UserClaim[]
  createdAt       DateTime    @default(now())
  updatedAt       DateTime?   @updatedAt

  @@unique([name, network])
}

model UserClaim {
  id               String         @id @default(cuid())
  userId           String
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  claimedAt        DateTime
  cryptoCurrencyId String
  cryptoCurrency   CryptoCurrency @relation(fields: [cryptoCurrencyId], references: [id], onDelete: Cascade)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime?      @updatedAt

  @@unique([userId, cryptoCurrencyId])
}
